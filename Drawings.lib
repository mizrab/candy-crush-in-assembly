
; takes x and y coordiantes and and an integer from 1 to 6 as parameters and draws candy
; integer tells which candy model to draw
; each candy model takes 

drawCandy macro candyArray, gridSize, padding

	local SHAPE_0,SHAPE_1, SHAPE_2, SHAPE_3, SHAPE_4, SHAPE_5, SHAPE_6, BOMB
	local EXIT_DRAWING
	
	saveRegisterStates
	
	mov i, 0
	mov j, 0
	
	hideCursor
	
	cmp id, 0
		je SHAPE_0
	cmp id, 1
		je SHAPE_1
	cmp id, 2
		je SHAPE_2
	cmp id, 3
		je SHAPE_3
	cmp id, 4
		je SHAPE_4
	cmp id, 5
		je SHAPE_5
	cmp id, 6
		je SHAPE_6
	cmp id, 7
		je BOMB
	jmp EXIT_DRAWING

;-------------------------------------------------------
	
	SHAPE_0:
	
		inc x
		dec y
		
		.while (j <= (gridSize - 2 ))
			mov i, 0

			.while (i <= (gridSize - 2))
				delay 5
				mov ah, 0ch ; function code
				mov al , 0 ; colour
				mov bh, 0 ; page number
				mov dx, y ; y - coordinate
				mov cx, x ; x - coordinate
				sub dx, i
				int 10h
				inc i
			.endw
			
			inc j
			inc x
		.endw
		
	jmp EXIT_DRAWING

;-------------------------------------------------------
	SHAPE_1:
		add x, padding
		sub y, padding
	
			.while (i <= (gridSize - (2*padding)))
				mov ah, 0ch ; function code
				mov al, 10 ; colour
				mov bh, 0 ; page number
				mov dx, y ; y - coordinate
				mov cx, x ; x - coordinate
				add cx, i
				int 10h
				inc i
			.endw
				mov i, 0	
				.while (i <= (gridSize - (2*padding)))
					mov ah, 0ch ; function code
					mov al, 10 ; colour
					mov bh, 0 ; page number
					mov dx, y ; y - coordinate
					mov cx, x ; x - coordinate
					add cx, i
					sub dx, i
					int 10h
					inc i
				.endw
			mov i,0
			mov y, dx
			mov x, cx
			.while (i <= (gridSize - (2*padding)))
				mov ah, 0ch ; function code
				mov al, 10 ; colour
				mov bh, 0 ; page number
				mov dx, y ; y - coordinate
				mov cx, x ; x - coordinate
				sub cx, i
				int 10h
				inc i
			.endw
				mov x, cx
				mov y, dx
				mov i, 0
			.while (i <= (gridSize - (2*padding)))
				mov ah, 0ch ; function code
				mov al, 10 ; colour
				mov bh, 0 ; page number
				mov dx, y ; y - coordinate
				mov cx, x ; x - coordinate
				add cx, i
				add dx, i
				int 10h
				inc i
			.endw
			jmp EXIT_DRAWING
;-------------------------------------------------------			
	SHAPE_2:
	
		sub y, padding
		add x, gridSize/2
	
		
		.while (i <= (gridSize/4 +padding/2 ))
			mov ah, 0ch ; function code
			mov al, 11 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub dx, i
			add cx, i 
			int 10h
			inc i
		.endw	
		mov i, 0	
		mov x, cx
		mov y, dx
		.while (i <= (gridSize/4 +padding/2 ))
			mov ah, 0ch ; function code
			mov al, 11 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub dx, i
			sub cx, i 
			int 10h
			inc i
		.endw	
		mov i, 0	
		mov x, cx
		mov y, dx
		.while (i <= (gridSize/4 +padding/2 ))
			mov ah, 0ch ; function code
			mov al, 11 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub cx, i
			add dx, i 
			int 10h
			inc i
		.endw	
		mov i, 0	
		mov x, cx
		mov y, dx
		.while (i <= (gridSize/4 +padding/2 ))
			mov ah, 0ch ; function code
			mov al, 11 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add dx, i
			add cx, i 
			int 10h
			inc i
		.endw
		
		jmp EXIT_DRAWING
;-------------------------------------------------------		
		SHAPE_3:
		
		add x, padding
		sub y, padding
		
		.while (i <= (gridSize- (2*padding)))
			mov ah, 0ch ; function code
			mov al, 14 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			int 10h
			inc i
		.endw
		mov i, 0	
		mov x, cx
		mov y, dx
	
		.while (i <= (gridSize- (2*padding)))
			mov ah, 0ch ; function code
			mov al, 14 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub dx, i
			int 10h
			inc i
		.endw
		mov i, 0	
		mov x, cx
		mov y, dx
		.while (i <= (gridSize - (2*padding) - (gridSize/ 3)))
			mov ah, 0ch ; function code
			mov al, 14 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add dx, i
			sub cx, i
			int 10h
			inc i
		.endw
		mov i, 0	
		mov x, cx
		mov y, dx
		dec x
		.while (i <= (gridSize - (2*padding) - (gridSize/ 3)))
			mov ah, 0ch ; function code
			mov al, 14 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub dx, i
			sub cx, i
			int 10h
			inc i
		.endw
		mov i, 0	
		mov x, cx
		mov y, dx
		;dec x
		.while (i <= (gridSize - (2*padding) ))
			mov ah, 0ch ; function code
			mov al, 14 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add dx, i
			int 10h
			inc i
		.endw	
	jmp EXIT_DRAWING
;-------------------------------------------------------	
	SHAPE_4:
	
	add x,  gridSize/2
	sub y, padding
	inc x
	.while (i <= (gridSize - (3*padding)))
			mov ah, 0ch ; function code
			mov al, 13 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			sub dx, i
			int 10h
			inc i
		.endw	
		mov i, 0	
		mov x, cx
		mov y, dx
		.while (i <= (gridSize - (4*padding) ))
			mov ah, 0ch ; function code
			mov al, 13 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub dx, i
			sub cx, i
			int 10h
			inc i
		.endw
		mov i, 0	
		mov x, cx
		mov y, dx		
		.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 13 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub cx, i
			add dx, i
			int 10h
			inc i
		.endw	
		mov i, 0	
		mov x, cx
		mov y, dx		
		.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 13 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub cx, i
			sub dx, i
			int 10h
			inc i
		.endw	
		mov i, 0	
		mov x, cx
		mov y, dx
		
		.while (i <= (gridSize - (4*padding) ))
			mov ah, 0ch ; function code
			mov al, 13 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add dx, i
			sub cx, i
			int 10h
			inc i
		.endw
		mov i, 0	
		mov x, cx
		mov y, dx
		.while (i <= (gridSize- (3*padding)))
			mov ah, 0ch ; function code
			mov al, 13 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			add dx, i
			int 10h
			inc i
		.endw
		jmp EXIT_DRAWING	
;-------------------------------------------------------

	SHAPE_5:
	add x, padding
	sub y, padding
		.while (i <= (gridSize- (2*padding)))
			mov ah, 0ch ; function code
			mov al, 6 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			int 10h
			inc i
		.endw
		mov i, 0	
		mov x, cx
		mov y, dx
	.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 6 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub dx, i
			sub cx, i
			int 10h
			inc i
		.endw
		mov i, 0	
		mov x, cx
		mov y, dx
	.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 6 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub dx, i
			add cx, i
			int 10h
			inc i
		.endw
		mov i, 0	
		mov x, cx
		mov y, dx
	.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 6 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub dx, i
			int 10h
			inc i
		.endw
		mov i, 0	
		mov x, cx
		mov y, dx
	.while (i <= (gridSize - (2*padding)))
			mov ah, 0ch ; function code
			mov al, 6 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub cx, i
			int 10h
			inc i
		.endw
		mov i, 0	
		mov x, cx
		mov y, dx
	.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 6 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add dx, i
			int 10h
			inc i
		.endw
		mov i, 0	
		mov x, cx
		mov y, dx
	.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 6 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add dx, i
			add cx, i
			int 10h
			inc i
		.endw
		mov i, 0	
		mov x, cx
		mov y, dx
		.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 6 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add dx, i
			sub cx, i
			int 10h
			inc i
		.endw
	jmp EXIT_DRAWING
;-------------------------------------------------------
		
	SHAPE_6:	
		add x, padding /2
		sub y, padding 
		add y, 2
		add x, (gridSize - (4*padding)) +1
		
			
		.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 4 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			sub dx, i
			int 10h
			inc i
		.endw
		mov i, 0	
		mov x, cx
		mov y, dx
		.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 4 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			add dx, i
			int 10h
			inc i
		.endw
		mov i, 0
		mov x, cx
		mov y, dx
		.while (i <= (gridSize/6))
			mov ah, 0ch ; function code
			mov al, 4 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			sub dx, i
			int 10h
			inc i
		.endw
		mov i, 0
		mov x, cx
		mov y, dx
		.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 4 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub cx, i
			sub dx, i
			int 10h
			inc i
		.endw
		mov i, 0
		mov x, cx
		mov y, dx
		.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 4 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			sub dx, i
			int 10h
			inc i
		.endw
		mov i, 0
		mov x, cx
		mov y, dx
		.while (i <= (gridSize/6))
			mov ah, 0ch ; function code
			mov al, 4 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub cx, i
			sub dx, i
			int 10h
			inc i
		.endw
		mov i, 0
		mov x, cx
		mov y, dx
		.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 4 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub cx, i
			add dx, i
			int 10h
			inc i
		.endw
		mov i, 0
		mov x, cx
		mov y, dx
		.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 4 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub cx, i
			sub dx, i
			int 10h
			inc i
		.endw
		mov i, 0
		mov x, cx
		mov y, dx
		.while (i <= (gridSize/6))
			mov ah, 0ch ; function code
			mov al, 4 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub cx, i
			add dx, i
			int 10h
			inc i
		.endw
		mov i, 0
		mov x, cx
		mov y, dx
		.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 4 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			add dx, i
			int 10h
			inc i
		.endw
		mov i, 0
		mov x, cx
		mov y, dx
		.while (i <= (gridSize - (4*padding)))
			mov ah, 0ch ; function code
			mov al, 4 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub cx, i
			add dx, i
			int 10h
			inc i
		.endw
		mov i, 0
		mov x, cx
		mov y, dx
		.while (i <= (gridSize/6))
			mov ah, 0ch ; function code
			mov al, 4 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			add dx, i
			int 10h
			inc i
		.endw

		jmp EXIT_DRAWING
;-------------------------------------------------------
	BOMB:
		
	add x, padding
	sub y, padding	

	.while (j <= (gridSize - (2*padding)))
		mov i, 0
				
		.while (i <= (gridSize - (2*padding)))
			mov ah, 0ch ; function code
			mov al, 0 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub dx, i
			int 10h
			inc i
		.endw
		
		mov i, 0
		.if (j == 0 || j == 2 || j == 13 || j == 15)
			.while (i <= (gridSize - (2*padding)))
				mov ah, 0ch ; function code
				mov al, 4 ; colour
				mov bh, 0 ; page number
				mov dx, y ; y - coordinate
				mov cx, x ; x - coordinate
				sub dx, i
				int 10h
				inc i
			.endw
		.endif

		mov i, 3
		.if (j == 5 || j == 6)
			.while (i <= (gridSize - (2*padding) - 3))
				mov ah, 0ch ; function code
				mov al, 15 ; colour
				mov bh, 0 ; page number
				mov dx, y ; y - coordinate
				mov cx, x ; x - coordinate
				sub dx, i
				int 10h
				inc i
			.endw
		.endif

		inc j
		inc x
	.endw

	mov i, 3
	mov j, 0

	.while (j <= (gridSize - (2*padding)))
		dec x
		inc j
	.endw

	mov j, 0
	mov cx, x
	mov dx, y
	add cx, 6
	sub dx, 3

	.while (i < 7)
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 0 ; page number
		int 10h
		dec dx
		inc cx
		inc i
	.endw

	inc dx
	dec cx
	mov i, 3

	.while (i < 7)
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 0 ; page number
		int 10h
		dec dx
		dec cx
		inc i
	.endw

	inc cx
	add dx, 3
	mov i, 3

	.while (i < 7)
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 0 ; page number
		int 10h
		dec dx
		inc cx
		inc i
	.endw

	inc dx
	dec cx
	mov i, 2

	.while (i < 5)
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 0 ; page number
		int 10h
		dec dx
		dec cx
		inc i
	.endw

	inc dx
	add cx,2
	mov i, 3

	.while (i < 6)
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 0 ; page number
		int 10h
		inc dx
		inc cx
		inc i
	.endw

	dec cx
	dec cx
	mov i, 3

	.while (i < 5)
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 0 ; page number
		int 10h
		inc dx
		dec cx
		inc i
	.endw

	dec dx
	inc cx
	mov i, 3

	.while (i < 6)
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 0 ; page number
		int 10h
		inc dx
		inc cx
		inc i
	.endw

	dec dx
	dec cx
	mov i, 3

	.while (i < 7)
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 0 ; page number
		int 10h
		inc dx
		dec cx
		inc i
	.endw

	EXIT_DRAWING:
	
	retrieveRegisterStates
	showCursor
	
endm


;-----------------------------------------------------------------------------------

drawBoard macro gridXoffset, gridYoffset, colour, delayTime

	local DRAW_LINE_H, DRAW_LINE_V
	local DRAW_HORIZONTAL_LINES, DRAW_VERTICAL_LINES
	
		; where should the gridding start from?
	mov x, gridXoffset ; if changing here, then also change below for vertical lines
	mov y, gridYoffset
	
	mov j, 0
	DRAW_HORIZONTAL_LINES:
			mov i, 0
			DRAW_LINE_H:
				mov ah, 0ch ; function code
				mov al, colour ; colour
				mov bh, 0 ; page number
				mov dx, y ; y - coordinate
				mov cx, x ; x - coordinate
				add cx, i
				int 10h
				inc i				
				cmp i,  (gridSize * 7) 
			jbe DRAW_LINE_H
			delay delayTime
	inc j
	add y, gridSize
	cmp j, 7
	jbe DRAW_HORIZONTAL_LINES
	
	
	mov x, gridXoffset
	mov y, gridYoffset
	
	mov j, 0
	DRAW_VERTICAL_LINES:
			mov i, 0
			DRAW_LINE_V:
				mov ah, 0ch ; function code
				mov al, colour ; colour
				mov bh, 0 ; page number
				mov dx, y ; y - coordinate
				mov cx, x ; x - coordinate
				add dx, i
				int 10h
				inc i				
				cmp i, (gridSize * 7) 
				
			jbe DRAW_LINE_V
			delay delayTime
	inc j
	add x, gridSize
	cmp j, 7
	jbe DRAW_VERTICAL_LINES

endm


;-----------------------------------------------------------------------------------

DrawLogo macro candyArray

		; padding 10 -> from left and right
		; padding 25 -> from up and down
		
		mov x, 10 ; 
		mov y, 25
		
		.while (i <= 40)
			mov ah, 0ch ; function code
			mov al, 15 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			add dx, i
			int 10h
			inc i
		.endw
		mov i ,0 
	
		; vertical line
		.while (i <= 100)
			mov ah, 0ch ; function code
			mov al, 15 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add dx, i
			int 10h
			inc i
		.endw
		
		mov x, cx
		mov y, dx
		mov i ,0 
		
		.while (i <= 40)
			mov ah, 0ch ; function code
			mov al, 15; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			sub dx, i
			int 10h
			inc i
		.endw
		
		; Drawing rectangle
		mov x, 40 + 10
		mov y, 125
		mov i ,0 
		
		.while (i <= 100)
			mov ah, 0ch ; function code
			mov al, 15 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			;add cx, i
			sub dx, i
			int 10h
			inc i
		.endw
		
		mov x, cx
		mov y, dx
		mov i ,0 
		
		.while (i <= 220)
			mov ah, 0ch ; function code
			mov al, 15 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			int 10h
			inc i
		.endw
		
		mov x, cx
		mov y, dx
		mov i, 0
		.while (i <= 100)
			mov ah, 0ch ; function code
			mov al, 15 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add dx, i
			int 10h
			inc i
		.endw
		
		mov x, cx
		mov y, dx
		mov i, 0
		.while (i <= 220)
			mov ah, 0ch ; function code
			mov al, 15 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub cx, i
			int 10h
			inc i
		.endw
		
		mov i, 0
		mov x, 10+50+50+200 ; 
		mov y, 25
		.while (i <= 40)
			mov ah, 0ch ; function code
			mov al, 15 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub cx, i
			add dx, i
			int 10h
			inc i
		.endw
		
		mov i, 0
		mov x, 10+50+50+200 ; 
		mov y, 25
		.while (i <= 100)
			mov ah, 0ch ; function code
			mov al, 15 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add dx, i
			int 10h
			inc i
		.endw
		
		mov i, 0
		mov x, cx
		mov y, dx
		.while (i <= 40)
			mov ah, 0ch ; function code
			mov al, 15 ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			sub cx, i
			sub dx, i
			int 10h
			inc i
		.endw
endm

;-----------------------------------------------------------------------------------
;Macro to write string with each character having a random colour
; Spacing = spaces between characters
; DTime = time delay between printing each characters
; RC = Random Colour
drawStringRC macro str, candyArray, xCord, yCord, spacing, dTime

	mov x, xCord
	mov y, yCord
	mov i, 0
	mov si, offset str

	.while( i <= (lengthof str - 2))
			
			delay dTime
			setCur (byte ptr x), (byte ptr y), 00h
			
			mov ah,09         ; FUNCTION 9
			mov al, [si]       ; HEART ASCII
			mov bh, 00h			; page number
			
			;Pushing to save value of counter
			push i
			
			add i, 9
			.if (i >= 16)
				sub i, 7
			.endif
			
			.if (i == 13)
				mov i, 10
			.endif
			
			mov bl, byte ptr i 	; colour
			mov cx, 01h      ;  CARACTERS
			int 10H              ; INTERRUPT 10 -> BIOS
			
			;Retrieving counter value
			pop i
			inc i
			inc si	
			add y, spacing
		.endw
		
	mov i, 0
endm

;-----------------------------------------------------------------------------------
;Macro to write string with static colours
drawStringSC macro str, candyArray, rowNum, colNum, colour, dTime

	saveRegisterStates

	mov x, rowNum
	mov y, colNum
	mov i, 0
	mov si, offset str

	.while( i <= (lengthof str - 2))
			
			delay dTime
			setCur (byte ptr x), (byte ptr y), 00h
			
			mov ah,09         ; FUNCTION 9
			mov al, [si]       ; HEART ASCII
			mov bh, 00h			; page number

			mov bl, colour 	; colour
			mov cx, 01h      ;  CARACTERS
			int 10H              ; INTERRUPT 10 -> BIOS
			
			inc i
			inc si	
			inc y
		.endw
	mov i, 0
	
	retrieveRegisterStates	
	
endm

;-----------------------------------------------------------------------------------
;Macro to draw a triangle (Used in menu)
drawTriangle macro candyArray, xCord, yCord, clr

	mov x, xCord
	mov y, yCord
	mov j, 10
	.while (j > 0)

		mov i, 0
		mov ax, j
		.while (i < ax)
			mov ah, 0ch ; function code
			mov al, clr ; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add dx, i
			int 10h
			inc i
			mov ax, j
		.endw
	inc x
	inc y
	sub j, 2
	.endw
endm

;--------------------------------------------------------------------
;Macro to draw a single character, take's character ascii, row & col as parameters.
drawChar macro char, row, col	
	setCur row, col
	mov dx, 0
	mov ah, 02h
	mov dl, char
	int 21h
endm
;--------------------------------------------------------------------

drawBorder macro candyArray
	
	mov x, 10
	mov y, 10
	mov i, 0
	.while (i <= 300)
		delay 5
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 00 ; page number
		mov dx, y ; y - coordinate
		mov cx, x ; x - coordinate
		add cx, i
		int 10h
		inc i
	.endw
	
	mov x, cx
	mov y, dx
	mov i, 0
	.while (i <= 180)
	delay 5
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 00 ; page number
		mov dx, y ; y - coordinate
		mov cx, x ; x - coordinate
		add dx, i
		int 10h
		inc i
	.endw
	
	mov x, cx
	mov y, dx
	mov i, 0
	.while (i <= 300)
	delay 5
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 00 ; page number
		mov dx, y ; y - coordinate
		mov cx, x ; x - coordinate
		sub cx, i
		int 10h
		inc i
	.endw
	
	mov x, cx
	mov y, dx
	mov i, 0
	.while (i <= 180)
	
	delay 5
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 00 ; page number
		mov dx, y ; y - coordinate
		mov cx, x ; x - coordinate
		sub dx, i
		int 10h
		inc i
	.endw
	
	mov x, 15
	mov y, 15
	mov i, 0
	.while (i <= 290)
		delay 5
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 00 ; page number
		mov dx, y ; y - coordinate
		mov cx, x ; x - coordinate
		add cx, i
		int 10h
		inc i
	.endw
	
	mov x, cx
	mov y, dx
	mov i, 0
	.while (i <= 170)
	delay 5
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 00 ; page number
		mov dx, y ; y - coordinate
		mov cx, x ; x - coordinate
		add dx, i
		int 10h
		inc i
	.endw
	
	mov x, cx
	mov y, dx
	mov i, 0
	.while (i <= 290)
	delay 5
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 00 ; page number
		mov dx, y ; y - coordinate
		mov cx, x ; x - coordinate
		sub cx, i
		int 10h
		inc i
	.endw
	
	mov x, cx
	mov y, dx
	mov i, 0
	.while (i <= 170)
	
	delay 5
		mov ah, 0ch ; function code
		mov al, 15 ; colour
		mov bh, 00 ; page number
		mov dx, y ; y - coordinate
		mov cx, x ; x - coordinate
		sub dx, i
		int 10h
		inc i
	.endw

endm

;---------------------------------------------------
	
drawRandomCandies macro
	
	setCandy 35, 65, 2
	drawCandy candyArray, gridSize, padding
	
	setCandy 240, 70, 2
	drawCandy candyArray, gridSize, padding
	
	setCandy 20, 140, 3
	drawCandy candyArray, gridSize, padding
	
	setCandy 260, 150, 3
	drawCandy candyArray, gridSize, padding
	
	setCandy 220, 125, 4
	drawCandy candyArray, gridSize, padding
	
	setCandy 75, 170, 4
	drawCandy candyArray, gridSize, padding

	setCandy 50, 110, 5
	drawCandy candyArray, gridSize, padding
	
	setCandy 200, 180, 5
	drawCandy candyArray, gridSize, padding
	
	setCandy 35, 175, 6
	drawCandy candyArray, gridSize, padding
	
	setCandy 270, 110, 6
	drawCandy candyArray, gridSize, padding

endm	

;-------------------------------------------------------

highlightBox macro candyArray, gridSize,boxToHighlight, colour	
	
	saveRegisterStates
	
	mov bx, boxToHighlight
	setCandy  xCoordsArray[bx], yCoordsArray[bx], 0

	
	mov i, 0
	mov j, 0
	
		.while (i <= gridSize)
			mov ah, 0ch ; function code
			mov al, colour; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			int 10h
			inc i
		.endw

	mov x, cx
	mov y, dx
	mov i, 0
	.while (i <= gridSize)
		mov ah, 0ch ; function code
		mov al, colour; colour
		mov bh, 0 ; page number
		mov dx, y ; y - coordinate
		mov cx, x ; x - coordinate
		sub dx, i
		int 10h
		inc i
	.endw	
	
	mov x, cx
	mov y, dx
	mov i, 0
	.while (i <= gridSize)
		mov ah, 0ch ; function code
		mov al, colour; colour
		mov bh, 0 ; page number
		mov dx, y ; y - coordinate
		mov cx, x ; x - coordinate
		sub cx, i
		int 10h
		inc i
	.endw
	
	mov x, cx
	mov y, dx
	mov i, 0
	.while (i <= gridSize)
		mov ah, 0ch ; function code
		mov al, colour; colour
		mov bh, 0 ; page number
		mov dx, y ; y - coordinate
		mov cx, x ; x - coordinate
		add dx, i
		int 10h
		inc i
	.endw
	
	retrieveRegisterStates

endm

;-------------------------------------------------------

drawRect macro

	mov i, 0
	mov j, 0
	
	mov x, 35
	mov y, 90
	
		.while (j <= 160)
			.while (i <= 20)
				mov ah, 0ch ; function code
				mov al, 0; colour
				mov bh, 0 ; page number
				mov dx, y ; y - coordinate
				mov cx, x ; x - coordinate
				add dx, i
				int 10h
				inc i
			.endw
			inc x
			inc j
			mov i, 0
		.endw

endm

;-------------------------------------------------------

drawCrushingOutline macro colour

saveRegisterStates

	mov x, 298
	mov y, 25
	
	mov i,0
	.while (i <= 20)
			mov ah, 0ch ; function code
			mov al, colour; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add dx, i
			int 10h
			inc i
		.endw
		
		mov x, 220
		mov i, 0
		.while (i <= 20)
			mov ah, 0ch ; function code
			mov al, colour; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add dx, i
			int 10h
			inc i
		.endw
		
		
		mov x, cx
		mov y, dx
		mov i, 0
		.while (i <= 78)
			mov ah, 0ch ; function code
			mov al, colour; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			int 10h
			inc i
		.endw
		
		mov i, 0
		.while (i <= 78)
			mov ah, 0ch ; function code
			mov al, colour; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			int 10h
			inc i
		.endw
		
		sub y, 20
		mov i,0 
		.while (i <= 78)
			mov ah, 0ch ; function code
			mov al, colour; colour
			mov bh, 0 ; page number
			mov dx, y ; y - coordinate
			mov cx, x ; x - coordinate
			add cx, i
			int 10h
			inc i
		.endw
				
retrieveRegisterStates

endm

;------------------------

